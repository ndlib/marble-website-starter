import React from 'react'
import { shallow } from 'enzyme'
import { SeoContent } from './'
import Helmet from 'react-helmet'
import CanonicalLink from './CanonicalLink'
import MetaTagGroup from './MetaTagGroup'

// This will be generated by useStaticQuery and GraphQL in the parent component
const site = {
  siteMetadata: {
    title: 'Site Title',
    description: 'Site description',
    author: 'Some Person',
    siteUrl: 'https://example.test',
  },
}
const defaultImage = './image.png'
describe('SeoContent', () => {
  test('Title only prop', () => {
    const props = {
      title: 'Test Title',
      site: site,
      defaultImage: defaultImage,
    }
    const wrapper = shallow(<SeoContent {...props} />)

    expect(wrapper.find(Helmet).at(0).props().htmlAttributes).toEqual({ 'lang': 'en' })
    expect(wrapper.find(Helmet).at(0).props().title).toEqual('Test Title')
    expect(wrapper.find(Helmet).at(0).props().titleTemplate).toEqual('Test Title | Site Title')
    expect(wrapper.find(Helmet).at(0).props().meta).toEqual([{
      name: 'description',
      content: 'Site description',
    }])
    expect(wrapper.find(CanonicalLink).props().base).toEqual('https://example.test')
    expect(wrapper.find(CanonicalLink).props().pathname).toBeUndefined()
    expect(wrapper.find(MetaTagGroup).length).toEqual(2)
  })

  test('All the props', () => {
    const props = {
      title: 'A New Test Title',
      description: 'A different description',
      image: '/wubbzy.gif',
      lang: 'en-gb',
      pathname: '/some/page',
      site: site,
      defaultImage: defaultImage,
    }
    const wrapper = shallow(<SeoContent {...props} />)

    expect(wrapper.find(Helmet).at(0).props().htmlAttributes).toEqual({ 'lang': 'en-gb' })
    expect(wrapper.find(Helmet).at(0).props().title).toEqual('A New Test Title')
    expect(wrapper.find(Helmet).at(0).props().titleTemplate).toEqual('A New Test Title | Site Title')
    expect(wrapper.find(Helmet).at(0).props().meta).toEqual([{
      name: 'description',
      content: 'A different description',
    }])
    expect(wrapper.find(CanonicalLink).props().base).toEqual('https://example.test')
    expect(wrapper.find(CanonicalLink).props().pathname).toEqual('/some/page')
    expect(wrapper.find(MetaTagGroup).length).toEqual(2)
  })
})
